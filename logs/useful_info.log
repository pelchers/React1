# Useful Information Log

## Environment and Configuration
- **Environment Variables**: 
  - Use `.env` files to store sensitive data like database URLs and API keys.
- **Line Endings**:
  - Configure Git to handle line endings on Windows with `git config --global core.autocrlf true`.

## Git and Version Control
- **Branching**:
  - Use `git checkout -b <branch-name>` to create and switch to a new branch.
  - Use `git checkout <branch-name>` to switch between branches.
- **Pushing and Pulling**:
  - Use `git push -u origin <branch-name>` to push a new branch to the remote repository.
  - Use `git pull origin <branch-name>` to pull the latest changes from a remote branch.
- **Merging**:
  - Use `git merge <branch-name>` to merge changes from one branch into another.
- **Remote Repositories**:
  - Use `git remote add origin <your-repo-url>` to add a remote repository.

## Database Management
- **PostgreSQL**:
  - Use `psql -U postgres -d React1 -h localhost` to connect to your PostgreSQL database.
  - Ensure PostgreSQL service is running before attempting to connect.
- **Migrations**:
  - Use `npx knex migrate:latest` to apply database migrations.

## Project Structure and Commands
- **Directory Structure**:
  - Use `tree -L 2 -I 'node_modules|*.log|*.json|*.md'` to display a simplified directory structure.
- **Log Management**:
  - Regularly update log files in the `logs` directory to track commands, syntax, errors, and ease of use considerations.

## Development Practices
- **Documentation**:
  - Maintain a comprehensive log of all interactions and decisions made during the project development.
- **Best Practices**:
  - Follow best practices for code organization, security, and version control. 
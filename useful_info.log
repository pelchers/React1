# Useful Information Log

## Environment and Configuration
- **Environment Variables**: 
  - Use `.env` files to store sensitive data like database URLs and API keys.
- **Line Endings**:
  - Configure Git to handle line endings on Windows with `git config --global core.autocrlf true`.

## Git and Version Control
- **Branching**:
  - Use `git checkout -b <branch-name>` to create and switch to a new branch.
  - Use `git checkout <branch-name>` to switch between branches.
  - Keep the `main` or `master` branch stable and use it for production-ready code.
  - Create feature branches for new features or changes, and merge them into `development` or `main` after testing.

- **Step-by-Step Procedure for Branch Management**:
  1. **Check Current Branch**:
     - **Command**: Use `git branch` to see which branch you're currently on.
     - **Purpose**: Ensure you're working in the correct branch for your current task.

  2. **Commit Any Uncommitted Changes**:
     - **Command**: Use `git status` to check for uncommitted changes.
     - **If Changes Exist**: Use `git add .` to stage changes and `git commit -m "Your commit message"` to commit them.

  3. **Update Branches to Latest**:
     - **Switch to the Branch to Update**: Use `git checkout <branch-name>`.
     - **Merge Latest Changes**: Use `git merge <source-branch>` to bring in the latest changes from the source branch.

  4. **Push Updates to Remote**:
     - **Command**: Use `git push origin <branch-name>` to push the updated branch to the remote repository.

  5. **Switch Back to Development Branch**:
     - **Command**: Use `git checkout development` to return to the development branch for ongoing work.

- **Pushing and Pulling**:
  - Use `git push -u origin <branch-name>` to push a new branch to the remote repository.
  - Use `git pull origin <branch-name>` to pull the latest changes from a remote branch.

- **Merging**:
  - **Command**: Use `git merge <branch-name>` to merge changes from one branch into another.
  - **Branch to Be In**: You should be on the branch you want to update (e.g., `boilerplate-1`) when you run the merge command.
  - **Most Up-to-Date Branch**: The branch you are merging from (e.g., `development`) should be the most up-to-date with the latest changes.
  - **Purpose**: This ensures that the target branch (the one you're on) receives all the latest updates from the source branch.
  - **Regular Updates**: Regularly merge changes from `development` into `main` to keep it updated.

- **Remote Repositories**:
  - Use `git remote add origin <your-repo-url>` to add a remote repository.
  - Regularly push changes to GitHub to ensure your work is backed up and accessible.

- **Branch Management**:
  - Always return to the `development` branch for ongoing work by using `git checkout development`.

## Database Management
- **PostgreSQL**:
  - Use `psql -U postgres -d React1 -h localhost` to connect to your PostgreSQL database.
  - Ensure PostgreSQL service is running before attempting to connect.

- **Migrations**:
  - Use `npx knex migrate:latest` to apply database migrations.

## Project Structure and Commands
- **Directory Structure**:
  - Use `tree -L 2 -I 'node_modules|*.log|*.json|*.md'` to display a simplified directory structure.

- **Log Management**:
  - Regularly update log files in the `logs` directory to track commands, syntax, errors, and ease of use considerations.

## Development Practices
- **Documentation**:
  - Maintain a comprehensive log of all interactions and decisions made during the project development.

- **Best Practices**:
  - Follow best practices for code organization, security, and version control.